<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.planner.mapper.FriendMapper">

	<!-- 친구요청 객체 찾기 -->
	<select id="findByFriendRequest" resultType="FriendRequestDTO">
		select *
		from friend_request
		where member_send_id=#{member_send_id}
	</select>
	
	<!-- 친구신청 상태 찾기 -->
<!-- 	<select id="RequestStatus" resultType="String"> -->
<!-- 		select friend_request_status -->
<!-- 		from friend_request -->
<!-- 		where member_receive_id=#{member_receive_id}; -->
<!-- 		and member_send_id=#{member_send_id} -->
<!-- 	</select> -->
	
	<!-- 친구요청 (보낸)시퀀스 찾기 -->
<!-- 	<select id="findByMemberId" resultType="Long"> -->
<!-- 		select fr.member_send_id, m.member_name -->
<!-- 		from friend_request fr -->
<!-- 		left outer join member m -->
<!-- 		on fr.member_send_id=m.member_id -->
<!-- 		where fr.member_send_id=#{member_id} -->
<!-- 	</select> -->

	<!-- 친구신청 (보낼 때 / 보낸사람 데이터 추가) -->
	<insert id="friendRequest" parameterType="FriendRequestDTO">
		insert into friend_request values(
			friend_request_seq.NEXTVAL,
			#{member_receive_id},
			#{member_send_id},
			'R'
		)
	</insert>
	
	<!-- 친구신청 전 중복검사 -->
	<!--  
	<select id="friendCheck" resultType="String">
		select friend_request_status
		from friend_request
		where member_receive_id = #{member_receive_id}
		and member_send_id = #{member_send_id}
		and friend_request_status = 'R'
		or friend_request_status ='F'
	</select>
	-->
	
	<!-- 받은 아이디로 보낸 아이디 찾기 -->
<!-- 	<select id=""> -->
	
<!-- 	</select> -->
	
	<!-- 친구신청 받은 아이디로 보낸 아이디 찾기 -->
	<!--  
	<select id="findBySendIdList" resultType="FriendRequestDTO">
		select fr.*, m.member_id
		from friend_request fr
		left outer join member m
		on fr.member_receive_id = m.member_id
		where member_receive_id = #{member_receive_id}
		and friend_request_status='R'
	</select>
	-->
	
	<!-- (받은)친구신청 리스트 -->
	<select id="receiveRequestList" resultType="FriendRequestDTO">
		select m.member_id, fr.*
		from member m
		left outer join friend_request fr
		on m.member_id = fr.member_receive_id
		where m.member_id = #{member_receive_id}
		and friend_request_status = 'R'
		and member_status = 'B'
	</select>
	
	<!-- (받은)친구신청 거절 -->
	<delete id="receiveDelete">
		delete
		from friend_request
		where member_receive_id = #{member_receive_id}
		and member_send_id = #{member_send_id}
	</delete>
	
	<!-- 친구수락 -->
	<update id="friendAccept" parameterType="Long">
		update friend_request
		set friend_request_status = 'F'
		where member_receive_id = #{member_receive_id}
		and member_send_id = #{member_send_id}
	</update>
	
	<!-- 친구 테이블에 추가 -->
	<insert id="friendAdd" parameterType="FriendDTO">
		insert into friend values(
			friend_seq.NEXTVAL,
			#{member_my_id},
			#{member_friend_id},
			'none',
			#{friend_nickname},
			'none',
			'none',
			'B',
			'B'
		)
	</insert>
	
	<!-- 친구 정보 테이블에 추가 -->
	<!--  
	<insert id="friendInfoAdd" parameterType="FriendInfoDTO">
		insert into friend_info values(
			#{member_my_id},
			#{member_friend_id},
			'none',
			'none',
			'none',
			'none'
		)
	</insert>
	-->
	
	<!-- 친구목록 -->
	<select id="friendList" resultType="FriendDTO">
		select *
		from(
			select 
				friend_id, 
				member_friend_id, 
				friend_my_nickname, 
				friend_nickname, 
				friend_my_memo, 
				friend_memo, 
				friend_nickname_status, 
				friend_memo_status
			from friend
			where member_my_id = #{member_my_id}
			union all
			select 
				friend_id, 
				member_my_id as member_friend_id, 
				friend_my_nickname, 
				friend_nickname, 
				friend_my_memo, 
				friend_memo, 
				friend_nickname_status, 
				friend_memo_status
			from friend
			where member_friend_id = #{member_my_id}) f
		left outer join member m
		on f.member_friend_id = m.member_id
	</select>
	
	<!-- 친구 닉네임 변경 (추가) -->
	<update id="friendNickNameSend" parameterType="friendDTO">
		update friend
		set
			friend_nickname = #{friend_nickname},
			friend_nickname_status = 'R'
		where member_my_id = #{member_my_id}
		and member_friend_id = #{member_friend_id}
	</update>
	
	<!-- 친구 닉네임 변경 (수정) (친구에게 등록당한 나의 아이디 = member_friend_id) -->
	<update id="friendNickNameReceive" parameterType="friendDTO">
		update friend_info
		set	friend_my_nickname = #{friend_nickname}
		where member_friend_id = #{member_my_id}
	</update>
	
	<!-- 친구신청 보낸 아이디 찾기 -->
	<!-- 
	<select id="findBySendId" resultType="FriendRequestDTO">
		select *
		from friend_request
		where member_receive_id=#{member_receive_id}
		and member_send_id=#{member_send_id}
	</select>
	-->
	
	<!-- 친구신청 보낸 아이디 찾기 -->
	<!-- 
	<select id="findBySendId" resultType="FriendRequestDTO">
		select member_send_id
		from friend_request
		where member_receive_id=#{member_receive_id}
	</select>
	-->
	
	<!-- 친구신청 보낸 아이디 찾기 -->
	<!--  
	<select id="findBySendId" resultType="FriendRequestDTO">
		select *
		from friend_request
		where member_send_id = #{member_send_id}
		and member_receive_id = #{member_receive_id}
	</select>
	-->
	
	
	<!-- 친구 신청 (받을 때 / 받는사람 데이터 추가) -->
<!-- 	<insert id="friendReceive" parameterType="FriendRequestDTO"> -->
<!-- 		insert into friend_request values( -->
<!-- 			friend_request_seq.NEXTVAL, -->
<!-- 			#{member_receive_id}, -->
<!-- 			#{member_send_id}, -->
<!-- 			'R' -->
<!-- 		) -->
<!-- 	</insert> -->
	
	<!-- 친구신청 상태 -->
	<!--  
	<select id="RequestStatus" resultType="String">
		select friend_request_status
		from friend_request
		where member_receive_id=#{member_receive_id}
		and member_send_id=#{member_send_id}
	</select>
	-->
	
</mapper>